//// Autogenerated from Pigeon (v1.0.2), do not edit directly.
//// See also: https://pub.dev/packages/pigeon
//
//package dev.flutter.pigeon;
//
//import io.flutter.plugin.common.BasicMessageChannel;
//import io.flutter.plugin.common.BinaryMessenger;
//import io.flutter.plugin.common.MessageCodec;
//import io.flutter.plugin.common.StandardMessageCodec;
//import java.io.ByteArrayOutputStream;
//import java.nio.ByteBuffer;
//import java.util.Arrays;
//import java.util.ArrayList;
//import java.util.List;
//import java.util.Map;
//import java.util.HashMap;
//
///** Generated class from Pigeon. */
//@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression"})
//public class pigeons {
//
//  /** Generated class from Pigeon that represents data sent in messages. */
//  public static class NetworkResult {
//    private String wifi;
//    public String getWifi() { return wifi; }
//    public void setWifi(String setterArg) { this.wifi = setterArg; }
//
//    private String wifi_tether;
//    public String getWifi_tether() { return wifi_tether; }
//    public void setWifi_tether(String setterArg) { this.wifi_tether = setterArg; }
//
//    private String wifiboth;
//    public String getWifiboth() { return wifiboth; }
//    public void setWifiboth(String setterArg) { this.wifiboth = setterArg; }
//
//    private String private;
//    public String getPrivate() { return private; }
//    public void setPrivate(String setterArg) { this.private = setterArg; }
//
//    private String cellular;
//    public String getCellular() { return cellular; }
//    public void setCellular(String setterArg) { this.cellular = setterArg; }
//
//    private String Usb;
//    public String getUsb() { return Usb; }
//    public void setUsb(String setterArg) { this.Usb = setterArg; }
//
//    private String Bluethooth;
//    public String getBluethooth() { return Bluethooth; }
//    public void setBluethooth(String setterArg) { this.Bluethooth = setterArg; }
//
//    private Boolean IsWifiConnected;
//    public Boolean getIsWifiConnected() { return IsWifiConnected; }
//    public void setIsWifiConnected(Boolean setterArg) { this.IsWifiConnected = setterArg; }
//
//    private Boolean IsHotspotEnabled;
//    public Boolean getIsHotspotEnabled() { return IsHotspotEnabled; }
//    public void setIsHotspotEnabled(Boolean setterArg) { this.IsHotspotEnabled = setterArg; }
//
//    private Boolean IsWifiEnabled;
//    public Boolean getIsWifiEnabled() { return IsWifiEnabled; }
//    public void setIsWifiEnabled(Boolean setterArg) { this.IsWifiEnabled = setterArg; }
//
//    Map<String, Object> toMap() {
//      Map<String, Object> toMapResult = new HashMap<>();
//      toMapResult.put("wifi", wifi);
//      toMapResult.put("wifi_tether", wifi_tether);
//      toMapResult.put("wifiboth", wifiboth);
//      toMapResult.put("private", private);
//      toMapResult.put("cellular", cellular);
//      toMapResult.put("Usb", Usb);
//      toMapResult.put("Bluethooth", Bluethooth);
//      toMapResult.put("IsWifiConnected", IsWifiConnected);
//      toMapResult.put("IsHotspotEnabled", IsHotspotEnabled);
//      toMapResult.put("IsWifiEnabled", IsWifiEnabled);
//      return toMapResult;
//    }
//    static NetworkResult fromMap(Map<String, Object> map) {
//      NetworkResult fromMapResult = new NetworkResult();
//      Object wifi = map.get("wifi");
//      fromMapResult.wifi = (String)wifi;
//      Object wifi_tether = map.get("wifi_tether");
//      fromMapResult.wifi_tether = (String)wifi_tether;
//      Object wifiboth = map.get("wifiboth");
//      fromMapResult.wifiboth = (String)wifiboth;
//      Object private = map.get("private");
//      fromMapResult.private = (String)private;
//      Object cellular = map.get("cellular");
//      fromMapResult.cellular = (String)cellular;
//      Object Usb = map.get("Usb");
//      fromMapResult.Usb = (String)Usb;
//      Object Bluethooth = map.get("Bluethooth");
//      fromMapResult.Bluethooth = (String)Bluethooth;
//      Object IsWifiConnected = map.get("IsWifiConnected");
//      fromMapResult.IsWifiConnected = (Boolean)IsWifiConnected;
//      Object IsHotspotEnabled = map.get("IsHotspotEnabled");
//      fromMapResult.IsHotspotEnabled = (Boolean)IsHotspotEnabled;
//      Object IsWifiEnabled = map.get("IsWifiEnabled");
//      fromMapResult.IsWifiEnabled = (Boolean)IsWifiEnabled;
//      return fromMapResult;
//    }
//  }
//
//  public interface Result<T> {
//    void success(T result);
//    void error(Throwable error);
//  }
//  private static class Api2HostCodec extends StandardMessageCodec {
//    public static final Api2HostCodec INSTANCE = new Api2HostCodec();
//    private Api2HostCodec() {}
//    @Override
//    protected Object readValueOfType(byte type, ByteBuffer buffer) {
//      switch (type) {
//        case (byte)128:
//          return NetworkResult.fromMap((Map<String, Object>) readValue(buffer));
//
//        default:
//          return super.readValueOfType(type, buffer);
//
//      }
//    }
//    @Override
//    protected void writeValue(ByteArrayOutputStream stream, Object value)     {
//      if (value instanceof NetworkResult) {
//        stream.write(128);
//        writeValue(stream, ((NetworkResult) value).toMap());
//      } else
//{
//        super.writeValue(stream, value);
//      }
//    }
//  }
//
//  /** Generated interface from Pigeon that represents a handler of messages from Flutter.*/
//  public interface Api2Host {
//    void result(NetworkResult result, Result<NetworkResult> result);
//
//    /** The codec used by Api2Host. */
//    static MessageCodec<Object> getCodec() {
//      return Api2HostCodec.INSTANCE;
//    }
//
//    /** Sets up an instance of `Api2Host` to handle messages through the `binaryMessenger`. */
//    static void setup(BinaryMessenger binaryMessenger, Api2Host api) {
//      {
//        BasicMessageChannel<Object> channel =
//            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.Api2Host.result", getCodec());
//        if (api != null) {
//          channel.setMessageHandler((message, reply) -> {
//            Map<String, Object> wrapped = new HashMap<>();
//            try {
//              ArrayList<Object> args = (ArrayList<Object>)message;
//              NetworkResult resultArg = (NetworkResult)args.get(0);
//              if (resultArg == null) {
//                throw new NullPointerException("resultArg unexpectedly null.");
//              }
//              Result<NetworkResult> resultCallback = new Result<NetworkResult>() {
//                public void success(NetworkResult result) {
//                  wrapped.put("result", result);
//                  reply.reply(wrapped);
//                }
//                public void error(Throwable error) {
//                  wrapped.put("error", wrapError(error));
//                  reply.reply(wrapped);
//                }
//              };
//
//              api.result(resultArg, resultCallback);
//            }
//            catch (Error | RuntimeException exception) {
//              wrapped.put("error", wrapError(exception));
//              reply.reply(wrapped);
//            }
//          });
//        } else {
//          channel.setMessageHandler(null);
//        }
//      }
//    }
//  }
//  private static Map<String, Object> wrapError(Throwable exception) {
//    Map<String, Object> errorMap = new HashMap<>();
//    errorMap.put("message", exception.toString());
//    errorMap.put("code", exception.getClass().getSimpleName());
//    errorMap.put("details", null);
//    return errorMap;
//  }
//}
